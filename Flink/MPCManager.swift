//
//  MPCManager.swift
//  Flink
//
//  Created by Victor Yves Crispim on 07/5/15.
//  Copyright (c) 2015 Flink. All rights reserved.
//

import MultipeerConnectivity

/**
 *
 *  MPCManager is a singleton responsible for handling the search
 *  and connection of different devices using the Flink app,
 *  besides receiving and transfering data between those devices.
 *
 *  The configureMPCManagerWith(displayName:andDelegate:) method
 *  should always be the first method to be called.
 *
*/
class MPCManager: NSObject, MCSessionDelegate, MCNearbyServiceBrowserDelegate, MCNearbyServiceAdvertiserDelegate
{
    
    //MARK: Singleton Pattern
    
    private static var singletonInstance: MPCManager!
    
    static var instance: MPCManager {
        
        if (singletonInstance == nil) {
            singletonInstance = MPCManager()
        }
        return singletonInstance
    }
    
    private override init()
    {
        super.init()
    }
    
    
    //MARK: Private attributes
    
    private let serviceTypeString = "FlinkService"
    private var delegate: MPCManagerDelegate?
    private var discoveryInfo = [String:String]()
    
    private var session: MCSession?
    private var peer: MCPeerID?
    private var browser: MCNearbyServiceBrowser?
    private var advertiser: MCNearbyServiceAdvertiser?
    
    /**
     *
     *  Creates all the objects necessary to the MPC Framework
     *  and performs the initial setup
     *
     *  :param: displayName:    the name that will be displayed to others
     *                          when searching for connections. Can't be
     *                          changed without destroying the actual session
     *
     *  :param: delegate:       the object responsible for handling new events
     *                          generated by the MPCManager
    */
    func configureMPCManagerWith(displayName: String, andDelegate delegate: MPCManagerDelegate)
    {
        peer = MCPeerID(displayName: displayName)
        session = MCSession(peer: peer)
        session!.delegate = self;
        
        setupBrowser()
        setupAdvertiser()
        
        self.delegate = delegate
    }
    
    
    //MARK: MCNearbyServiceBrowserDelegate methods
    
    func browser(browser: MCNearbyServiceBrowser!, didNotStartBrowsingForPeers error: NSError!)
    {
        println(error.description);
    }
    
    func browser(   browser: MCNearbyServiceBrowser!,
        foundPeer peerID: MCPeerID!,
        withDiscoveryInfo info: [NSObject : AnyObject]!)
    {
        
        let foundPeerName = info["Name"] as! String
        delegate?.mpcManagerDidFoundPeer(peerID, named: foundPeerName)
        
    }
    
    func browser(browser: MCNearbyServiceBrowser!, lostPeer peerID: MCPeerID!)
    {
        
    }
    
    
    //MARK: MCNearbyServiceAdvertiserDelegate methods
    
    func advertiser(    advertiser: MCNearbyServiceAdvertiser!,
        didReceiveInvitationFromPeer peerID: MCPeerID!,
        withContext context: NSData!,
        invitationHandler: ((Bool, MCSession!) -> Void)!)
    {
        
    }
    
    func advertiser(    advertiser: MCNearbyServiceAdvertiser!, didNotStartAdvertisingPeer error: NSError!)
    {
        
    }
    
    
    //MARK: MCSessionDelegate methods
    
    func session(session: MCSession!, peer peerID: MCPeerID!, didChangeState state: MCSessionState)
    {
        var peerInfo: [String:NSObject] = ["peerID":peerID, "state":state.rawValue]
        delegate?.mpcManagerPeerDidChangedState(peerInfo)
    }
    
    func session(session: MCSession!, didReceiveData data: NSData!, fromPeer peerID: MCPeerID!)
    {
        
    }
    
    //Methods to handle file and data stream transfer. Not used, but needed
    func session(session: MCSession!, didStartReceivingResourceWithName resourceName: String!, fromPeer peerID:
        MCPeerID!, withProgress progress: NSProgress!) { }
    
    func session(session: MCSession!, didFinishReceivingResourceWithName resourceName: String!, fromPeer peerID: MCPeerID!, atURL localURL: NSURL!, withError error: NSError!) { }
    
    func session(session: MCSession!, didReceiveStream stream: NSInputStream!, withName streamName: String!, fromPeer peerID: MCPeerID!) { }
    
    
    //MARK: Custom methods
    
    func startBrowsingForPeers()
    {
        self.browser?.startBrowsingForPeers()
    }
    
    func stopBrowsingForPeers()
    {
        browser?.stopBrowsingForPeers()
    }
    
    func startAdvertisingPeer()
    {
        advertiser?.startAdvertisingPeer()
    }
    
    func stopAdversingPeer()
    {
        advertiser?.stopAdvertisingPeer();
    }
    
    //MARK: Private Methods
    
    func setupBrowser()
    {
        browser = MCNearbyServiceBrowser(peer: peer, serviceType: serviceTypeString)
    }
    
    func setupAdvertiser()
    {
        //TODO get the username here
        discoveryInfo.updateValue("Name", forKey: "");
        advertiser = MCNearbyServiceAdvertiser( peer: peer, discoveryInfo: discoveryInfo,
            serviceType: serviceTypeString)
    }
}