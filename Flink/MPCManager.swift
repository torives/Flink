//
//  MPCManager.swift
//  Flink
//
//  Created by Victor Yves Crispim on 07/5/15.
//  Copyright (c) 2015 Flink. All rights reserved.
//

import MultipeerConnectivity

/**
 *
 *  MPCManager is a singleton responsible for handling the search
 *  and connection of different devices using the Flink app,
 *  besides receiving and transfering data between those devices.
 *
 *  The configureMPCManagerWith(displayName:andDelegate:) method
 *  should always be the first method to be called.
 *
*/
class MPCManager: NSObject, MCSessionDelegate, MCNearbyServiceBrowserDelegate, MCNearbyServiceAdvertiserDelegate
{
    
    //MARK: Singleton Pattern
    
    private static var singletonInstance: MPCManager!
    
    static var instance: MPCManager {
        
        if (singletonInstance == nil) {
            singletonInstance = MPCManager()
        }
        return singletonInstance
    }
    
    private override init()
    {
        super.init()
    }
    
    
    //MARK: Private attributes
    
    private var defaultInviteMessage: String?
    private let serviceTypeString = "FlinkService"
    private var delegate: MPCManagerDelegate?
    private var discoveryInfo = [String:String]()
    private var foundPeers = NSMutableSet()
    
    private var session: MCSession?
    private var peer: MCPeerID?
    private var browser: MCNearbyServiceBrowser?
    private var advertiser: MCNearbyServiceAdvertiser?
    
    
    //MARK: MCNearbyServiceBrowserDelegate methods
    
    func browser(browser: MCNearbyServiceBrowser!, didNotStartBrowsingForPeers error: NSError!)
    {
        println("\(error)")
    }
    
    func browser(   browser: MCNearbyServiceBrowser!,
                    foundPeer peerID: MCPeerID!,
                    withDiscoveryInfo info: [NSObject : AnyObject]!)
    {
        foundPeers.addObject(peerID)
        delegate?.mpcManagerDidFoundPeer(peerID.displayName)
    }
    
    func browser(browser: MCNearbyServiceBrowser!, lostPeer peerID: MCPeerID!)
    {
        let lostPeerName = peerID.displayName
        delegate?.mpcManagerDidLostPeer(lostPeerName)

        foundPeers.removeObject(peerID)
    }
    
    
    //MARK: MCNearbyServiceAdvertiserDelegate methods
    
    func advertiser(    advertiser: MCNearbyServiceAdvertiser!,
                        didReceiveInvitationFromPeer peerID: MCPeerID!,
                        withContext context: NSData!,
                        invitationHandler: ((Bool, MCSession!) -> Void)!)
    {
        let alertController = UIAlertController(    title: "Atention!", message: defaultInviteMessage,
                                                    preferredStyle: UIAlertControllerStyle.Alert)
        
        let rejectAction = UIAlertAction(title: "Reject", style: .Destructive)
        { (action) in
            invitationHandler(false,nil)
        }

        let acceptAction = UIAlertAction(title: "Accept", style: .Default)
        { (action) in
            
            self.session = MCSession(peer:self.peer)
            self.session?.delegate
            
            invitationHandler(true,self.session)
        }

        alertController.addAction(acceptAction)
        alertController.addAction(rejectAction)
        
        delegate!.mpcManagerReceivedConnectionInvitation(alertController)
    }
    
    func advertiser(    advertiser: MCNearbyServiceAdvertiser!,
                        didNotStartAdvertisingPeer error: NSError!)
    {
        println("\(error)")
    }
    
    
    //MARK: MCSessionDelegate methods
    
    func session(session: MCSession!, peer peerID: MCPeerID!, didChangeState state: MCSessionState)
    {
        var peerInfo: [String:NSObject] = ["peerID":peerID, "state":state.rawValue]
        delegate?.mpcManagerPeerDidChangedState(peerInfo)
    }
    
    func session(session: MCSession!, didReceiveData data: NSData!, fromPeer peerID: MCPeerID!)
    {
        
    }
    
    //Methods to handle file and data stream transfer. Not used, but needed
    func session(session: MCSession!, didStartReceivingResourceWithName resourceName: String!, fromPeer peerID: MCPeerID!, withProgress progress: NSProgress!) { }
    
    func session(session: MCSession!, didFinishReceivingResourceWithName resourceName: String!, fromPeer peerID: MCPeerID!, atURL localURL: NSURL!, withError error: NSError!) { }
    
    func session(session: MCSession!, didReceiveStream stream: NSInputStream!, withName streamName: String!, fromPeer peerID: MCPeerID!) { }
    
    
    //MARK: Custom methods
    
    /**
     *
     *  Creates all the objects necessary to the MPC Framework
     *  and performs the initial setup
     *
     *  :param: displayName The name that will be displayed to others
     *                      when searching for connections. Can't be
     *                      changed without destroying the actual session
     *
     *  :param: delegate    The object responsible for handling new events
     *                      generated by the MPCManager
     *
     *  :param: message     The message to be displayed to an invited peer
    */
    func configureMPCManagerWith(displayName: String, defaultInvitationMessage message: String, andDelegate delegate: MPCManagerDelegate)
    {
        peer = MCPeerID(displayName: displayName)
        defaultInviteMessage = message
        
        setupBrowser()
        setupAdvertiser()
        
        self.delegate = delegate
    }
    
    
    /**
     *
     *  Sends a connection invitation to the designated peer
     *
     *  :param: peerDisplayName  The name of the peer who will receive
     *                           the invitation
    */
    func connectToPeerNamed(peerDisplayName: String)
    {
        var guestPeer: MCPeerID?
        
        //TODO not sure if this will work
        let guestPeerSet = foundPeers.filteredSetUsingPredicate(
                            NSPredicate(format: "entity.displayName LIKE %@", peerDisplayName))
        
        guestPeer = guestPeerSet.first as? MCPeerID
       
        if let peer = guestPeer
        {
            browser?.invitePeer(guestPeer, toSession: self.session, withContext: nil, timeout: 30.0)
        }
        else
        {
            println("peer \(peerDisplayName) was not found")
        }
    }
 
    func disconnectFromCurrentSession()
    {
        session!.disconnect()
    }
    
    func startBrowsingForPeers()
    {
        self.browser?.startBrowsingForPeers()
    }
    
    func stopBrowsingForPeers()
    {
        browser?.stopBrowsingForPeers()
    }
    
    func startAdvertisingPeer()
    {
        advertiser?.startAdvertisingPeer()
    }
    
    func stopAdversingPeer()
    {
        advertiser?.stopAdvertisingPeer();
    }
    

    //MARK: Private Methods
    
    func setupBrowser()
    {
        browser = MCNearbyServiceBrowser(peer: peer, serviceType: serviceTypeString)
    }
    
    func setupAdvertiser()
    {
        //TODO get info about the user from UserDAO
        advertiser = MCNearbyServiceAdvertiser( peer: peer, discoveryInfo: discoveryInfo,
                                                serviceType: serviceTypeString)
    }
}